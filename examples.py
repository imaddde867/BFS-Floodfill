# examples.py

"""
Collection of example grids for demonstrating the flood fill algorithm.
"""

# Simple square pattern
SIMPLE_SQUARE = [
    ['-', '-', '-', '-', '-'],
    ['-', 'X', 'X', 'X', '-'],
    ['-', 'X', 'X', 'X', '-'],
    ['-', 'X', 'X', 'X', '-'],
    ['-', '-', '-', '-', '-']
]

# Heart shape pattern
HEART = [
    ['-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', 'X', 'X', '-', '-', 'X', 'X', '-'],
    ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'],
    ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'],
    ['-', 'X', 'X', 'X', 'X', 'X', 'X', '-'],
    ['-', '-', 'X', 'X', 'X', 'X', '-', '-'],
    ['-', '-', '-', 'X', 'X', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-']
]

# Maze pattern
MAZE = [
    ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'],
    ['X', '-', '-', '-', 'X', '-', '-', '-', '-', 'X'],
    ['X', '-', 'X', '-', 'X', '-', 'X', 'X', '-', 'X'],
    ['X', '-', 'X', '-', '-', '-', 'X', 'X', '-', 'X'],
    ['X', '-', 'X', 'X', 'X', 'X', 'X', 'X', '-', 'X'],
    ['X', '-', '-', '-', '-', '-', '-', '-', '-', 'X'],
    ['X', '-', 'X', 'X', 'X', 'X', 'X', 'X', '-', 'X'],
    ['X', '-', 'X', '-', '-', '-', '-', 'X', '-', 'X'],
    ['X', '-', '-', '-', 'X', 'X', '-', '-', '-', 'X'],
    ['X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X']
]

# Island pattern (with multiple islands)
ISLANDS = [
    ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', 'X', 'X', '-', '-', '-', '-', 'X', '-', '-'],
    ['-', 'X', 'X', '-', '-', '-', 'X', 'X', 'X', '-'],
    ['-', '-', '-', '-', 'X', '-', '-', 'X', '-', '-'],
    ['-', '-', '-', 'X', 'X', 'X', '-', '-', '-', '-'],
    ['-', '-', '-', '-', 'X', '-', '-', '-', '-', '-'],
    ['-', 'X', '-', '-', '-', '-', 'X', 'X', '-', '-'],
    ['-', 'X', 'X', '-', '-', '-', 'X', 'X', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-', '-']
]

# Your mountain/landscape pattern
LANDSCAPE = [
    ['-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', 'X', 'X', '-', '-'],
    ['-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', 'X', 'X', 'X', 'X', '-'],
    ['-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', 'X', 'X', '-', '-'],
    ['-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-', '-'],
    ['X', '-', '-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '-', '-'],
    ['X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X'],
    ['X', 'X', 'X', 'X', '-', '-', '-', '-', '-', '-', '-', '-', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X']
]

# Binary tree-like structure
BINARY_TREE = [
    ['-', '-', '-', '-', '-', 'X', '-', '-', '-', '-', '-'],
    ['-', '-', '-', '-', '/', '-', '\\', '-', '-', '-', '-'],
    ['-', '-', '-', 'X', '-', '-', '-', 'X', '-', '-', '-'],
    ['-', '-', '/', '-', '\\', '-', '/', '-', '\\', '-', '-'],
    ['-', 'X', '-', '-', '-', 'X', '-', '-', '-', 'X', '-'],
    ['/', '-', '\\', '-', '/', '-', '\\', '-', '/', '-', '\\'],
    ['X', '-', 'X', '-', 'X', '-', 'X', '-', 'X', '-', 'X']
]

# Checkerboard pattern
def create_checkerboard(size=8):
    """Create a checkerboard pattern of the specified size."""
    grid = []
    for i in range(size):
        row = []
        for j in range(size):
            if (i + j) % 2 == 0:
                row.append('X')
            else:
                row.append('-')
        grid.append(row)
    return grid

CHECKERBOARD = create_checkerboard()

# Function to return all available example grids
def get_all_examples():
    """Return a dictionary of all example grids."""
    return {
        'simple_square': SIMPLE_SQUARE,
        'heart': HEART,
        'maze': MAZE,
        'islands': ISLANDS,
        'landscape': LANDSCAPE,
        'binary_tree': BINARY_TREE,
        'checkerboard': CHECKERBOARD
    }

# Function to print available examples
def print_available_examples():
    """Print the names of all available example grids."""
    examples = get_all_examples()
    print("Available examples:")
    for i, name in enumerate(examples.keys(), 1):
        print(f"{i}. {name}")